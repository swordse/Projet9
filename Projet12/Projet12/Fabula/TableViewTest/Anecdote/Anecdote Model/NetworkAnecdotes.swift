//
//  NetworkAnecdotes.swift
//  TableViewTest
//
//  Created by RaphaÃ«l Goupille on 15/12/2021.
//

import Foundation
import FirebaseFirestore

class NetworkAnecdotes {
    
    let database = Firestore.firestore()
    
    //MARK: - USERINFO
    func getUserInfo(userId: String, callback: @escaping (Result<User, Error>) -> Void ) {
        let docRef = database.collection("users").whereField("userId", isEqualTo: userId)
        
        docRef.getDocuments { snapshot, error in
            guard let data = snapshot?.documents
                    , error == nil else {
                        callback(.failure(error!))
                        return
                    }
            
            let dictionary = data[0].data()
            let user = User(userName: dictionary["userName"] as! String, userId: dictionary["userId"] as! String, userEmail: dictionary["userEmail"] as! String)
            
            callback(.success(user))
        }
    }
    
    //MARK: - ANECDOTE
    
    //    func paginate() {
    //        let db = Firestore.firestore()
    //
    //        var firestoreResult = [[String: Any]]()
    //                // [START paginate]
    //                // Construct query for first 25 cities, ordered by population
    //                let first = db.collection("anecdotes")
    //            .order(by: "date", descending: true).limit(to: 5)
    //
    //                first.addSnapshotListener { (snapshot, error) in
    //                    guard let snapshot = snapshot else {
    //                        print("Error retreving cities: \(error.debugDescription)")
    //                        return
    //                    }
    //
    //                    guard let lastSnapshot = snapshot.documents.last else {
    //                        // The collection is empty.
    //                        return
    //                    }
    //
    //                    // Construct a new query starting after this document,
    //                    // retrieving the next 25 cities.
    //                    let next = db.collection("anecdotes")
    //                        .order(by: "date", descending: true)
    //                        .start(afterDocument: lastSnapshot)
    //
    //                    next.getDocuments { snapshot, error in
    //                        guard let data = snapshot?.documents
    //                                , error == nil else {
    //                                    callback(.failure(error!), nil)
    //                                    return
    //                                }
    //                    let lastSnapshot = snapshot?.documents.last
    //
    //                        for i in 0 ..< data.count {
    //                            var dictionary = data[i].data()
    //                            // get the id of the document generated by firebase
    //                            let id = data[i].documentID as Any
    //                            dictionary["id"] = id
    //                            // convert the date in Date
    //                            let fireDate = (data[i].data()["date"] as? Timestamp)?.dateValue() ?? Date()
    //                            dictionary["Date"] = fireDate
    //                            firestoreResult.append(dictionary)
    //                        }
    //                        callback(.success(firestoreResult), lastSnapshot)
    //                    }
    //    }
    
    func getAnecdotes(lastSnapshot: QueryDocumentSnapshot?, callback: @escaping (Result<[[String: Any]], NetworkError>, QueryDocumentSnapshot?) -> Void) {
        
        var firestoreResult = [[String: Any]]()
        
        var docRef: Query?
        
        if lastSnapshot == nil {
            print("pas de snapshot")
            docRef = database.collection("anecdotes").order(by: "date", descending: true).limit(to: 5)
        } else {
            print("avec snapshot\(lastSnapshot)")
            docRef = database.collection("anecdotes").order(by: "date", descending: true).limit(to: 5).start(afterDocument: lastSnapshot!)
        }
        
        docRef?.getDocuments { snapshot, error in
            
            if snapshot?.metadata.isFromCache == true {
                callback(.failure(NetworkError.noConnection), lastSnapshot)
            }
            print("ERREUR DANS docref.getdocuments\(error?.localizedDescription)")
            guard let data = snapshot?.documents
                    , error == nil else {
                        print("Description de l'erreur \(error?.localizedDescription as Any)")
                        callback(.failure(NetworkError.errorOccured), nil)
                        return
                    }
            
            let lastSnapshot = snapshot?.documents.last
            
            for i in 0 ..< data.count {
                var dictionary = data[i].data()
                // get the id of the document generated by firebase
                let id = data[i].documentID as Any
                dictionary["id"] = id
                // convert the date in Date
                let fireDate = (data[i].data()["date"] as? Timestamp)?.dateValue() ?? Date()
                dictionary["Date"] = fireDate
                firestoreResult.append(dictionary)
            }
            callback(.success(firestoreResult), lastSnapshot)
        }
    }
    
    func searchAnecdote(items: [String], callBack: @escaping (Result<[[String: Any]], Error>) -> Void) {
        var firestoreResult = [[String: Any]]()
        //        let docRef = database.collection("anecdotes").whereField("text", in: items)
        let docRef = database.collection("anecdotes").whereField("text", in: items)
        
        docRef.getDocuments { snapshot, error in
            guard let data = snapshot?.documents, error == nil else {
                callBack(.failure(error!))
                return }
            for i in 0 ..< data.count {
                var dictionnary = data[i].data()
                let id = data[i].documentID as Any
                dictionnary["id"] = id
                let fireDate = (data[i].data()["date"] as? Timestamp)?.dateValue() ?? Date()
                dictionnary["Date"] = fireDate
                firestoreResult.append(dictionnary)
            }
            callBack(.success(firestoreResult))
        }
    }
    
    //MARK: - COMMENTS
    func readComments(anecdoteId: String, callback: @escaping (Result<[[String: Any]], Error>) -> Void ) {
        
        var firestoreResult = [[String: Any]]()
        let docRef = database.collection("comments").whereField("anecdoteId", isEqualTo: anecdoteId)
        
        docRef.getDocuments { snapshot, error in
            guard let data = snapshot?.documents
                    , error == nil else {
                        return
                    }
            print(data)
            for i in 0 ..< data.count {
                var dictionary = data[i].data()
                let fireDate = (data[i].data()["date"] as? Timestamp)?.dateValue() ?? Date()
                dictionary["date"] = fireDate
                firestoreResult.append(dictionary)
            }
            callback(.success(firestoreResult))
        }
        
    }
}
